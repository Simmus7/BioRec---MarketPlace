// <auto-generated />
using System;
using BioRec___MarketPlace.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BioRec___MarketPlace.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210316014025_basedatos1")]
    partial class basedatos1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BioRec___MarketPlace.Models.CiudadDepPais", b =>
                {
                    b.Property<int>("idCiudadDepPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ciudad")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("idDepartamento")
                        .HasColumnType("int");

                    b.HasKey("idCiudadDepPais");

                    b.HasIndex("idDepartamento")
                        .IsUnique();

                    b.ToTable("CiudadDepPais");
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Departamento", b =>
                {
                    b.Property<int>("idDepartamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("departamento")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("idPais")
                        .HasColumnType("int");

                    b.HasKey("idDepartamento");

                    b.HasIndex("idPais")
                        .IsUnique();

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Direccion", b =>
                {
                    b.Property<int>("idDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("NumeroCasa")
                        .HasColumnType("int");

                    b.Property<int>("NumeroInmueble")
                        .HasColumnType("int");

                    b.Property<string>("NumeroVia")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("NumeroViaSecundario")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TipoInmueble")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("idCiudadDepPais")
                        .HasColumnType("int");

                    b.Property<string>("tipoVia")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("idDireccion");

                    b.HasIndex("idCiudadDepPais")
                        .IsUnique();

                    b.ToTable("Direccion");
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Pais", b =>
                {
                    b.Property<int>("idPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("pais")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("idPais");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Usuario", b =>
                {
                    b.Property<int>("idUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("apellido")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("contraseña")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("correo")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("edad")
                        .HasColumnType("int");

                    b.Property<DateTime>("fechanacimiento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idDireccion")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("rol")
                        .HasColumnType("int");

                    b.HasKey("idUsuario");

                    b.HasIndex("idDireccion")
                        .IsUnique();

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Venta", b =>
                {
                    b.Property<int>("idVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("fechaYHoraVenta")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("idVenta");

                    b.HasIndex("idUsuario");

                    b.ToTable("Venta");
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.CiudadDepPais", b =>
                {
                    b.HasOne("BioRec___MarketPlace.Models.Departamento", "Departamento")
                        .WithOne("CiudadDepPais")
                        .HasForeignKey("BioRec___MarketPlace.Models.CiudadDepPais", "idDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Departamento", b =>
                {
                    b.HasOne("BioRec___MarketPlace.Models.Pais", "Pais")
                        .WithOne("Departamento")
                        .HasForeignKey("BioRec___MarketPlace.Models.Departamento", "idPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Direccion", b =>
                {
                    b.HasOne("BioRec___MarketPlace.Models.CiudadDepPais", "CiudadDepPais")
                        .WithOne("Direccion")
                        .HasForeignKey("BioRec___MarketPlace.Models.Direccion", "idCiudadDepPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Usuario", b =>
                {
                    b.HasOne("BioRec___MarketPlace.Models.Direccion", "Direccion")
                        .WithOne("Usuario")
                        .HasForeignKey("BioRec___MarketPlace.Models.Usuario", "idDireccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BioRec___MarketPlace.Models.Venta", b =>
                {
                    b.HasOne("BioRec___MarketPlace.Models.Usuario", "Usuario")
                        .WithMany("Ventas")
                        .HasForeignKey("idUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
